import telebot
from telebot import types
from telebot.types import ReplyKeyboardRemove

import room_data
import user_data
from room import Room
from configparser import ConfigParser

from user import User

config = ConfigParser()
config.read('config.ini')

token = config.get('bot', 'token')
admin_id = config.get('bot', 'admin_id')

bot = telebot.TeleBot(token)

rooms = []
requests = []

room_data.load_rooms()
user_data.load_users()


@bot.message_handler(commands=['ban'])
def handler(message):
    if message.from_user.id == int(admin_id):
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        bot.register_next_step_handler(message, ban)


def ban(message):
    banned_id = int(message.text)
    user = user_data.get_user_with_id(banned_id)
    user.ban = True
    bot.send_message(banned_id, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.')
    bot.send_message(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
    if user.room:
        user.room.users.remove(user)
        user.room = None


@bot.message_handler(commands=['start', 'help'])
def handler(message):
    if not user_data.user_exists_with_id(message.from_user.id):
        load = User(user_id=message.from_user.id)
        user_data.users.append(load)
        user_data.user_db.insert_one(
            {
                'id': message.from_user.id,
                'room': 'None'
            }
        )
    user = user_data.get_user_with_id(message.from_user.id)
    if user.ban:
        bot.send_message(message.chat.id, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.')
        return
    if user.room:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('üö™–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã'))
        bot.send_message(message.chat.id, text=f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ {user.room.name}', reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            types.KeyboardButton("üìù–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
            types.KeyboardButton("üîë–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É"),
            types.KeyboardButton("üö™–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã"),
            types.KeyboardButton("üìà–ú–µ—Å—Ç–æ  –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"),
            types.KeyboardButton("üè¶–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã"),
            types.KeyboardButton("üßæ–ü—Ä–∞–≤–∏–ª–∞"),
            types.KeyboardButton("‚öôÔ∏è–ö–æ–º–Ω–∞—Ç—ã")
        ]
        markup.add(buttons[0], buttons[1], buttons[2])
        markup.add(buttons[3], buttons[4], buttons[5])
        if user.user_id == int(admin_id):
            markup.add(buttons[6])
        bot.send_message(
            message.chat.id,
            f'JUMBAS TEAM üåê —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–æ—Ç–µ "JUMBAS ROOMS"üö™\n\n'
            f'–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –º–µ–∂–¥—É —é–∑–µ—Ä–∞–º–∏. ü§´'
            f'–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –≤ —Å–¥–µ–ª–∫–µ, –Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?üìë'
            f'–≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –≤–∞—Å.ü§ñ',
            reply_markup=markup
        )


@bot.message_handler(func=lambda message: True)
def handler(message):
    user = user_data.get_user_with_id(message.from_user.id)
    if user.ban:
        bot.send_message(message.chat.id, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.')
        return
    if user:
        if message.text == "‚öôÔ∏è–ö–æ–º–Ω–∞—Ç—ã":
            markup = types.InlineKeyboardMarkup()
            buttons = []
            for room in room_data.rooms:
                buttons.append(types.InlineKeyboardButton(room.name, callback_data="ADMIN_" + room.name))
            for button in buttons:
                markup.add(button)
            if len(buttons) == 0:
                bot.send_message(message.chat.id, "–ö–æ–º–Ω–∞—Ç –µ—â–µ –Ω–µ—Ç")
            else:
                bot.send_message(message.chat.id, f'–ö–æ–º–Ω–∞—Ç—ã –±–æ—Ç–∞:', reply_markup=markup)
            return
        if message.text == "–í –º–µ–Ω—é":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = [
                types.KeyboardButton("üìù–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
                types.KeyboardButton("üîë–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É"),
                types.KeyboardButton("üö™–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã"),
                types.KeyboardButton("üìà–ú–µ—Å—Ç–æ  –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"),
                types.KeyboardButton("üè¶–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã"),
                types.KeyboardButton("‚öôÔ∏è–ö–æ–º–Ω–∞—Ç—ã")
            ]
            markup.add(buttons[0], buttons[1], buttons[2])
            markup.add(buttons[3], buttons[4], buttons[5])
            if user.user_id == int(admin_id):
                markup.add(buttons[6])
            bot.send_message(
                message.chat.id,
                f'JUMBAS TEAM üåê —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–æ—Ç–µ "JUMBAS ROOMS"üö™\n\n'
                f'–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –º–µ–∂–¥—É —é–∑–µ—Ä–∞–º–∏. ü§´'
                f'–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –≤ —Å–¥–µ–ª–∫–µ, –Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?üìë'
                f'–≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –≤–∞—Å.ü§ñ',
                reply_markup=markup
            )
            return
        if message.text == "üõë–ê–ª–∞—Ä–º":
            if user.room is not None:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='ALARM_' + user.room.name),
                           types.InlineKeyboardButton('üîô–û—Ç–º–µ–Ω–∞', callback_data='CANCEL'))
                bot.send_message(message.chat.id, f'–î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª. üßæ\n'
                                                  f'–ü–æ—Å–ª–µ –µ–µ –Ω–∞–∂–∞—Ç–∏—è –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ '
                                                  f'—Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.\n '
                                                  f'–ü—Ä–∏ –ª–æ–∂–Ω–æ–º –≤—ã–∑–æ–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ç–∞–∫–∂–µ –≤—ã–¥–∞—Ç—å –±–∞–Ω.üìµ\n\n'
                                                  f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?',
                                 reply_markup=markup)
            return
        if message.text == "üö™–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã":
            markup = types.InlineKeyboardMarkup()
            buttons = []
            for room in room_data.rooms:
                if room.owner == message.from_user.id:
                    buttons.append(types.InlineKeyboardButton(room.name, callback_data="MY_" + room.name))
            for button in buttons:
                markup.add(button)
            if len(buttons) == 0:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã")
            else:
                bot.send_message(message.chat.id, f'–í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=markup)
            return
        if message.text == "üßæ–ü—Ä–∞–≤–∏–ª–∞":
            bot.send_message(
                message.chat.id,
                f'–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–ª—É–∂–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∑–∞–∫–∞–∑—Éü§ù\n\n'
                f'1Ô∏è‚É£–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –≤–Ω–µ –±–æ—Ç–∞.\n'
                f'2Ô∏è‚É£–ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n'
                f'3Ô∏è‚É£–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏—è –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n\n'
                f'–ó–∞ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –±–∞–Ω –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö JUMBAS TEAMüìµ'
            )
            return
        if message.text == "–î–æ–±–∞–≤–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞":
            markup = types.InlineKeyboardMarkup()
            for user in user_data.users:
                markup.add(types.InlineKeyboardButton(user.user_id, callback_data='ADD_GARANT_' + str(user.user_id)))
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
                             reply_markup=markup)
            return
        if message.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É":
            markup = types.InlineKeyboardMarkup()
            for room in room_data.rooms:
                markup.add(types.InlineKeyboardButton(room.name, callback_data='DELETE_' + room.name))
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:',
                             reply_markup=markup)
            return
        if message.text == "üö™–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = [
                types.KeyboardButton("üìù–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
                types.KeyboardButton("üîë–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É"),
                types.KeyboardButton("üö™–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã"),
                types.KeyboardButton("üìà–ú–µ—Å—Ç–æ  –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"),
                types.KeyboardButton("üè¶–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã"),
                types.KeyboardButton("üßæ–ü—Ä–∞–≤–∏–ª–∞"),
            ]
            markup.add(buttons[0], buttons[1], buttons[2])
            markup.add(buttons[3], buttons[4], buttons[5])
            if user.room is None:
                bot.send_message(message.chat.id, '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ', reply_markup=markup)
                return
            bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã', reply_markup=markup)
            user.room.users.remove(user.user_id)
            user.room = None
            return
        if message.text == "üè¶–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã":
            bot.send_message(
                message.chat.id,
                '–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç JUMBAS TEAM üëâ @racepeaceday (coder)'
            )
        if message.text == "üìà–ú–µ—Å—Ç–æ  –¥–ª—è —Ä–µ–∫–ª–∞–º—ã":
            bot.send_message(message.chat.id,
                             f'–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ?\n'
                             f'üìú –ü–∏—à–∏—Ç–µ üì≤  @racepeaceday (coder)')
        if message.text == "üìù–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É":
            bot.send_message(
                message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (–¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤):'
            )
            bot.register_next_step_handler(message, set_name)
            return

        if message.text == "üîë–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = []
            for room in room_data.get_all():
                if len(room.users) < room.limit:
                    buttons.append(types.KeyboardButton(room.name))
            for button in buttons:
                markup.add(button)
            markup.add(types.KeyboardButton("–í –º–µ–Ω—é"))
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:', reply_markup=markup)
            return

        if message.text in room_data.get_room_name_list():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, login, room_data.get_room_with_name(message.text))
            return

        if message.text == '‚ûï–ü–æ–∑–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞':
            i = 1
            markup = types.InlineKeyboardMarkup()
            for garant in user_data.users:
                if garant.garant and not garant.room:
                    markup.add(types.InlineKeyboardButton(f'–ì–∞—Ä–∞–Ω—Ç ‚Ññ{i}', callback_data=garant.user_id))
                    i += 1
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤:', reply_markup=markup)
            return

        if message.text == '–ü—Ä–∏–Ω—è—Ç—å':
            for request in requests:
                if message.from_user.id == request[1]:
                    user_data.get_user_with_id(request[0]).room.users.append(user.user_id)
                    user.room = user_data.get_user_with_id(request[0]).room
                    for member in user.room.users:
                        if member != message.from_user.id:
                            bot.send_message(member,
                                             f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëãüèª –Ø @{message.from_user.username} üåê –±—É–¥—É –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∞–º '
                                             f'—Å–¥–µ–ª–∫—É!\n'
                                             f'\n–û—Ç–∑—ã–≤—ã - (—Å—Å—ã–ª–∫–∞)üíØ\n\n'
                                             f'–£—Å–ª—É–≥–∏ –≥–∞—Ä–∞–Ω—Ç–∞üëáüèª\n'
                                             f'–î–æ 100üí≤ - –∫–æ–º–∏—Å—Å–∏—è 7%\n'
                                             f'–û—Ç 100$-1000üí≤ - –∫–æ–º–∏—Å—Å–∏—è 5%\n'
                                             f'–û—Ç 1000üí≤ - –∫–æ–º–∏—Å—Å–∏—è 3%\n'
                                             f'–û—Ç 1000üí≤ - –∫–æ–º–∏—Å—Å–∏—è 3%\n'
                                             f'+2üí≤ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏\n\n'
                                             f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ  –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤ USDT. '
                                             f'–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ —Å–æ–≥–ª–∞—Å–∏—è 2—Ö —Å—Ç–æ—Ä–æ–Ω, –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç—Å—è –≤—ã–ø–ª–∞—Ç–∞ –∏–ª–∏ '
                                             f'–≤—ã–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö.')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(types.KeyboardButton('üö™–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã'))
                    bot.send_message(message.chat.id, f'–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É '
                                                      f'{user_data.get_user_with_id(request[0]).room.name}',
                                     reply_markup=markup)
            return

        if user.room:
            user.room.messages.append(
                {
                    'user': user.user_id,
                    'message': message.text
                }
            )
            for user_in_room in user.room.users:
                if user.user_id != user_in_room:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(types.KeyboardButton('‚ûï–ü–æ–∑–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞'))
                    markup.add(types.KeyboardButton('üõë–ê–ª–∞—Ä–º'))
                    markup.add(types.KeyboardButton('üö™–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã'))
                    if user.user_id == int(admin_id):
                        bot.send_message(user_in_room, '[–ê–¥–º–∏–Ω]: ' + message.text, reply_markup=markup)
                        return
                    if user.garant:
                        bot.send_message(user_in_room, '[–ì–∞—Ä–∞–Ω—Ç]: ' + message.text, reply_markup=markup)
                        return
                    else:
                        bot.send_message(user_in_room, f'[{user.user_id}]: ' + message.text, reply_markup=markup)
                        return


def login(message, room):
    pswd = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚ûï–ü–æ–∑–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞'))
    markup.add(types.KeyboardButton('üõë–ê–ª–∞—Ä–º'))
    markup.add(types.KeyboardButton('üö™–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã'))
    if room.password == pswd:
        bot.send_message(message.chat.id, f'–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É {room.name}', reply_markup=markup)
        room.users.append(message.from_user.id)
        user_data.get_user_with_id(message.chat.id).room = room
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')


def set_name(message):
    global name
    name = message.text
    if len(message.text) < 16:
        bot.register_next_step_handler(message, set_password)
        bot.send_message(
            message.chat.id,
            '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:'
        )
    else:
        bot.register_next_step_handler(message, set_name)


def set_password(message):
    global password
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton("üìù–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
        types.KeyboardButton("üîë–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É"),
        types.KeyboardButton("üö™–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã"),
        types.KeyboardButton("üìà–ú–µ—Å—Ç–æ  –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"),
        types.KeyboardButton("üè¶–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã"),
        types.KeyboardButton("üßæ–ü—Ä–∞–≤–∏–ª–∞"),
    ]
    markup.add(buttons[0], buttons[1], buttons[2])
    markup.add(buttons[3], buttons[4], buttons[5])
    password = message.text
    room = Room(room_id=len(room_data.get_all()), name=name, password=password, owner=message.from_user.id)
    room_data.get_all().append(room)
    room_data.rooms_db.insert_one(
        {
            'id': room.room_id,
            'owner': message.from_user.id,
            'name': room.name,
            'password': room.password,
            'users': room.users,
            'messages': room.messages
        }
    )
    bot.send_message(
        message.chat.id,
        f'–ö–æ–º–Ω–∞—Ç–∞ {room.name} —Å–æ–∑–¥–∞–Ω–∞!',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: True)
def handler(call):
    if 'BACK_' in call.data:
        bot.delete_message(call.from_user.id, call.message.id)
        room = room_data.get_room_with_name(call.data.split('_')[1])
        markup = types.InlineKeyboardMarkup()
        if room.limit > 2:
            markup.add(types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å —Å–ª–æ—Ç (-1)', callback_data='REMOVE_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç (+1)', callback_data='ADD_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', callback_data='DELETE_' + room.name))
        markup.add(types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', callback_data='HISTORY_' + room.name))
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='ADMINROOMS'))
        bot.send_message(call.from_user.id, f'üö™ –ö–æ–º–Ω–∞—Ç–∞ {room.name}'
                                            f'\n'
                                            f'\nüîé –°–æ–∑–¥–∞—Ç–µ–ª—å: {room.owner}'
                                            f'\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.users)}/{room.limit}'
                                            f'\nüîë –ü–∞—Ä–æ–ª—å: {room.password}'
                                            f'\n'
                                            f'\n‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–Ω–∞—Ç–æ–π:', reply_markup=markup)
    if 'HISTORY_' in call.data:
        room = room_data.get_room_with_name(call.data.split('_')[1])
        text = '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='BACK_' + room.name))
        for message in room.messages:
            text += f'\n[{message["user"]}]: {message["message"]}\n'
        bot.send_message(admin_id, f'{text}', reply_markup=markup)
        bot.delete_message(call.from_user.id, call.message.id)
    if 'ADMIN_' in call.data:
        room = room_data.get_room_with_name(call.data.split('_')[1])
        markup = types.InlineKeyboardMarkup()
        if room.limit > 2:
            markup.add(types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å —Å–ª–æ—Ç (-1)', callback_data='REMOVE_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç (+1)', callback_data='ADD_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', callback_data='DELETE_' + room.name))
        markup.add(types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', callback_data='HISTORY_' + room.name))
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='ADMINROOMS'))
        bot.delete_message(call.from_user.id, call.message.id)
        bot.send_message(call.from_user.id, f'üö™ –ö–æ–º–Ω–∞—Ç–∞ {room.name}'
                                            f'\n'
                                            f'\nüîé –°–æ–∑–¥–∞—Ç–µ–ª—å: {room.owner}'
                                            f'\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.users)}/{room.limit}'
                                            f'\nüîë –ü–∞—Ä–æ–ª—å: {room.password}'
                                            f'\n'
                                            f'\n‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–Ω–∞—Ç–æ–π:', reply_markup=markup)
    if call.data == 'CANCEL':
        bot.delete_message(call.from_user.id, call.message.id)
    if 'ALARM_' in call.data:
        bot.delete_message(call.from_user.id, call.message.id)
        bot.send_message(call.from_user.id, '–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω.')
        room = room_data.get_room_with_name(call.data.split('_')[1])
        admin = user_data.get_user_with_id(int(admin_id))
        text = '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n'
        for message in room.messages:
            text += f'\n[{message["user"]}]: {message["message"]}\n'
        bot.send_message(admin_id, f'–í –∫–æ–º–Ω–∞—Ç–µ {room.name} –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ '
                                   f'–¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n'
                                   f'{text}')
        admin.room = room
        room.users.append(admin.user_id)
    if call.data == 'ADMINROOMS':
        bot.delete_message(call.from_user.id, call.message.id)
        markup = types.InlineKeyboardMarkup()
        buttons = []
        for room in room_data.rooms:
            buttons.append(types.InlineKeyboardButton(room.name, callback_data="ADMIN_" + room.name))
        for button in buttons:
            markup.add(button)
        if len(buttons) == 0:
            bot.send_message(call.from_user.id, "–ö–æ–º–Ω–∞—Ç –µ—â–µ –Ω–µ—Ç")
        else:
            bot.send_message(call.from_user.id, f'–ö–æ–º–Ω–∞—Ç—ã –±–æ—Ç–∞:', reply_markup=markup)
    if call.data == 'ROOMS':
        bot.delete_message(call.from_user.id, call.message.id)
        markup = types.InlineKeyboardMarkup()
        buttons = []
        for room in room_data.rooms:
            if room.owner == call.from_user.id:
                buttons.append(types.InlineKeyboardButton(room.name, callback_data="MY_" + room.name))
        for button in buttons:
            markup.add(button)
        if len(buttons) == 0:
            bot.send_message(call.from_user.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã")
        else:
            bot.send_message(call.from_user.id, f'–í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã:', reply_markup=markup)
    if 'MY_' in call.data:
        room = room_data.get_room_with_name(call.data.split('_')[1])
        markup = types.InlineKeyboardMarkup()
        if room.limit > 2:
            markup.add(types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å —Å–ª–æ—Ç (-1)', callback_data='REMOVE_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç (+1)', callback_data='ADD_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', callback_data='DELETE_' + room.name))
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='ROOMS'))
        bot.delete_message(call.from_user.id, call.message.id)
        bot.send_message(call.from_user.id, f'üö™ –ö–æ–º–Ω–∞—Ç–∞ {room.name}'
                                            f'\n'
                                            f'\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.users)}/{room.limit}'
                                            f'\nüîë –ü–∞—Ä–æ–ª—å: {room.password}'
                                            f'\n'
                                            f'\n‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–Ω–∞—Ç–æ–π:', reply_markup=markup)
    if 'ADD_SLOT_' in call.data:
        room = room_data.get_room_with_name(call.data.split('_')[2])
        room.limit += 1
        markup = types.InlineKeyboardMarkup()
        if room.limit > 2:
            markup.add(types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å —Å–ª–æ—Ç (-1)', callback_data='REMOVE_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç (+1)', callback_data='ADD_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', callback_data='DELETE_' + room.name))
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='ROOMS'))
        bot.delete_message(call.from_user.id, call.message.id)
        bot.send_message(call.from_user.id, f'üö™ –ö–æ–º–Ω–∞—Ç–∞ {room.name}'
                                            f'\n'
                                            f'\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.users)}/{room.limit}'
                                            f'\nüîë –ü–∞—Ä–æ–ª—å: {room.password}'
                                            f'\n'
                                            f'\n‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–Ω–∞—Ç–æ–π:', reply_markup=markup)
    if 'REMOVE_SLOT_' in call.data:
        room = room_data.get_room_with_name(call.data.split('_')[2])
        room.limit -= 1
        markup = types.InlineKeyboardMarkup()
        if room.limit > 2:
            markup.add(types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å —Å–ª–æ—Ç (-1)', callback_data='REMOVE_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç (+1)', callback_data='ADD_SLOT_' + room.name))
        markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', callback_data='DELETE_' + room.name))
        markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='ROOMS'))
        bot.delete_message(call.from_user.id, call.message.id)
        bot.send_message(call.from_user.id, f'üö™ –ö–æ–º–Ω–∞—Ç–∞ {room.name}'
                                            f'\n'
                                            f'\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.users)}/{room.limit}'
                                            f'\nüîë –ü–∞—Ä–æ–ª—å: {room.password}'
                                            f'\n'
                                            f'\n‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–Ω–∞—Ç–æ–π:', reply_markup=markup)
    if 'DELETE_' in call.data:
        room = room_data.get_room_with_name(call.data.split('_')[1])
        room_data.delete_room(room)
        bot.delete_message(call.from_user.id, call.message.id)
        bot.send_message(call.from_user.id, '–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')
    if 'ADD_GARANT_' in call.data:
        new_garant = user_data.get_user_with_id(int(call.data.split('_')[2]))
        new_garant.garant = True
        bot.send_message(call.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {new_garant.user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º')
        bot.send_message(new_garant.user_id, '–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≥–∞—Ä–∞–Ω—Ç–æ–º')
    for g in user_data.users:
        if call.data == str(g.user_id):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = [
                types.KeyboardButton("–ü—Ä–∏–Ω—è—Ç—å"),
                types.KeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            ]
            markup.add(buttons[0])
            markup.add(buttons[1])
            requests.append([call.from_user.id, g.user_id])
            bot.send_message(g.user_id, '–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –±–µ—Å–µ–¥—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–∞—Ä–∞–Ω—Ç–∞.', reply_markup=markup)


bot.infinity_polling()
room_data.save_rooms()
user_data.save_users()
